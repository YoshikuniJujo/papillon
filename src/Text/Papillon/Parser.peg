{-# LANGUAGE FlexibleContexts, TemplateHaskell, UndecidableInstances #-}

module Text.Papillon.Parser (
	Peg,
	Definition,
	Selection,
	ExpressionHs,
	NameLeaf(..),
	NameLeaf_(..),
	parse,
	dv_peg,
	dv_pegFile,
	initialPos,
) where

import Data.Char
import Language.Haskell.TH
import Text.Papillon.SyntaxTree

[papillon|

pegFile :: PegFile
	= pr:pragma md:moduleDec pip:preImpPap _:importPapillon pp:prePeg _:pap
		p:peg _:spaces '|' ']' '\n' atp:afterPeg
			{ mkPegFile pr md pip pp p atp }
	/ pr:pragma md:moduleDec pp:prePeg _:pap p:peg _:spaces
		'|' ']' '\n' atp:afterPeg
			{ mkPegFile pr md emp pp p atp }
;
pragma :: MaybeString
	= _:spaces '{' '-' '#' s:pragmaStr _:pragmaEnd _:spaces { just s }
	/ _:spaces						{ nothing }
;
pragmaStr :: String
	= !_:pragmaEnd c s:pragmaStr		{ cons c s }
	/					{ emp }
;
pragmaEnd :: Nil
	= '#' '-' '}'				{ nil }
;
moduleDec :: MaybeString
	= 'm' 'o' 'd' 'u' 'l' 'e' s:moduleDecStr _:whr	{ just s }
	/						{ nothing }
;
moduleDecStr :: String
	= !_:whr c s:moduleDecStr			{ cons c s }
	/						{ emp }
;
whr :: Nil
	= 'w' 'h' 'e' 'r' 'e'				{ nil }
;
preImpPap :: String
	= !_:importPapillon !_:pap c pip:preImpPap	{ cons c pip }
	/					{ emp }
;
prePeg :: String
	= !_:pap c pp:prePeg	{ cons c pp }
	/					{ emp }
;
afterPeg :: String
	= c atp:afterPeg		{ cons c atp }
	/					{ emp }
;
importPapillon :: Nil
	= "import":varToken "Text":typToken '.' _:spaces "Papillon":typToken
		!'.'
		{ nil }
;
varToken :: String
	= v:variable _:spaces			{ v }
;
typToken :: String
	= t:typ _:spaces			{ t }
;
pap :: Nil
	= '\n' '[' 'p' 'a' 'p' 'i' 'l' 'l' 'o' 'n' '|' '\n'	{ nil }
;
peg :: TTPeg
	= _:spaces s:sourceType p:peg_		{ mkTTPeg s p }
	/ p:peg_				{ mkTTPeg tString p }
;
sourceType :: String
	= "source":varToken ':' _:spaces v:typToken	{ v }
;
peg_ :: Peg
	= _:spaces d:definition p:peg_	{ cons d p }
	/ 	{ emp }
;
definition :: Definition
	= v:variable _:spaces ':' ':'
		_:spaces t:hsType '='
		_:spaces sel:selection _:spaces ';'	{ mkDef v (getTyp t) sel }
;
selection :: Selection
	= ex:expressionHs _:spaces '/' _:spaces sel:selection	{ cons ex sel }
	/ ex:expressionHs	{ cons ex emp }
;
expressionHs :: ExpressionHs
	= e:expression _:spaces '{' _:spaces h:hsExp _:spaces '}'
		{ mkExpressionHs e h }
;
expression :: Expression
	= l:nameLeaf_ _:spaces e:expression	{ cons l e }
	/ 	{ emp }
;
nameLeaf_ :: NameLeaf_
	= '!' nl:nameLeaf			{ notAfter nl }
	/ nl:nameLeaf				{ here nl }
;
nameLeaf :: NameLeaf
	= n:pat1 ':' o:[isOpen o] ex:selection c:[isClose c] k:[isKome k] _:spaces
		{ mkNameLeafList n ex }
	/ o:[isOpen o] nl:nameLeaf c:[isClose c]	{ nl }
	/ n:pat1 ':' l:leaf		{ mkNameLeaf n l }
	/ n:pat1					{ mkNameLeaf n ctLeaf }
--	/ ':' l:leaf_			{ mkNameLeaf wildP l }
;
pat :: PatQ
	= t:typ _:spaces ps:pats		{ conToPatQ t ps }
	/ p:pat1				{ p }
;
pat1 :: PatQ
	= "_":variable				{ wildP }
	/ n:variable				{ strToPatQ n }
	/ '\'' c:charLit '\''			{ charP c }
	/ '"' s:stringLit '"'			{ stringP s }
	/ t:typ					{ conToPatQ t emp }
	/ '(' p:pat ')'				{ p }
;
charLit :: Char
	= c:[isAlphaNumOt c]			{ c }
	/ '\\' c:[elemNTs c]			{ getNTs c }
;
stringLit :: String
	= !_:dq c s:stringLit			{ cons c s }
	/					{ emp }
;
dq :: Nil
	= '"'					{ nil }
;
pats :: PatQs
	= p:pat ps:pats				{ cons p ps }
	/					{ emp }
;
leaf :: Leaf
	= t:test				{ boolLeaf t }
	/ v:variable t:test			{ ruleLeaf v t }
	/ v:variable				{ ruleLeaf v true }
;
test :: ExR
	= '[' h:hsExp ']'		{ getEx h }
;
hsExp :: Ex
	= e:hsExp1 _:spaces h:hsExp	{ applyExR e h }
	/ e:hsExp1			{ toEx e }
;
hsExp1 :: ExR
	= '(' et:hsExpTpl ')'		{ tupE et }
	/ v:variable			{ varE (mkName v) }
;
hsExpTpl :: ExRL
	= e:hsExp _:spaces c:[isComma c] _:spaces et:hsExpTpl
					{ cons (getEx e) et }
	/ e:hsExp			{ cons (getEx e) emp }
	/				{ emp }
;
hsType :: Typ
	= t:hsType1 ts:hsType		{ applyTyp (toTyp t) ts }
	/ t:hsType1			{ toTyp t }
;
hsType1 :: TypeQ
	= t:typToken			{ conT (mkName t) }
;
typ :: String
	= u:upper t:tvtail	{ cons u t }
;
variable :: String
	= l:lower t:tvtail	{ cons l t }
;
tvtail :: String
	= a:alpha t:tvtail	{ cons a t }
	/ 	{ emp }
;
alpha :: Char
	= u:upper	{ u }
	/ l:lower	{ l }
	/ d:digit	{ d }
;
upper :: Char
	= u:[isUpper u]		{ u }
;
lower :: Char
	= l:[isLowerU l]	{ l }
;
digit :: Char
	= d:[isDigit d]		{ d }
;
spaces :: Nil
	= _:space _:spaces	{ nil }
	/ 	{ nil }
;
space :: Nil
	= s:[isSpace s]			{ nil }
	/ '-' '-' _:notNLString _:nl	{ nil }
	/ _:comment			{ nil }
;
notNLString :: String
	= !_:nl c s:notNLString	{ cons c s }
	/			{ emp }
;
nl :: Nil
	= '\n'			{ nil }
;
comment :: Nil
	= '{' '-' !'#' _:comments _:comEnd	{ nil }
;
comments :: Nil
	= _:notComStr _:comment _:comments	{ nil }
	/ _:notComStr				{ nil }
;
notComStr :: Nil
	= !_:comment !_:comEnd _ _:notComStr	{ nil }
	/				{ nil }
;
comEnd :: Nil
	= '-' '}'			{ nil }
;

|]
