**************************
* 次にやること           *
**************************

* type で -> を許すようにする
	まずは (->) Int Int のような書きかたから

**************************
* parser の表記/機能関係 *
**************************

* haskell の exp のパースについて
	負数を許すようにする
		これは、'-' を関数とすることでできそうな気もする
		考えてみること
	(+) 3 4 とか 3 `div` 2 とかを許すようにする
	また、(+ 5) とか (== 'a') とかも
	infixE を使えば良い
* haskell の pat のパースについて
	負数を許すようにする
	(:) 3 [4] とか 3 `Some` 2 とかを許すようにする
* 式のなかで selection を使えるようにする
	_:head (_:some / _:other) :tail のような形
	これはすでに出来る気がするのであとで test を書いてみて
	それが通れば OK ということにする
* +, ? の追加
* & の追加

**************************
*  エラーメッセージ関係  *
**************************

* 下記の not not match の場合についてちゃんと表示しようとすると
	ほとんど文法木のすべてをちゃんと表示できる必要が出てくる。
	これは試みとしては悪くない。
	ただし、ここらへんは module として独立させたほうが良さそうだ

* EOF の場合はコードはないが、not not match の場合にはどうか
	どれかが失敗するのではなく、あるまとまりのすべてが成功してしまうのが
	問題であることを考えると、そのまとまり全体を文字列化する必要がある
	これは可能だが、その優先度と手間について考える必要がある

* ParseError の field に error になったコードとそれについていたコメントをいれる
	コメントはとりあえず {-# "..." #-}  でいれることにしよう

* 読み込んでいた要素も取得したい
	今考えているのは ExpQ で dv_..., と d を帰しその後に組み立てる方法
	それよりも返し得るすべての型に対して、
	data TypeForError = TFEHoge Hoge | TFE... ... | ... | TFEChar (Token ...)
	のような型を作ったほうがいいかもしれない

**************************
*  リファクタリング関係  *
**************************

* 関数の名前について
	parser とかそういう名前は conflict するので、もっとちゃんとした名前にする
	...M という名前を使ったときにとくに問題がある
* parser の呼び出しかたの改善
* papillon command は何も取らなければ filter とする。
	また、papillon [Input] や papillon [Input] -o [Output] の形も使う。
	そのうちに papillon -h や papillon --help も。
	より使いやすく GetOpt を使ってみるのもいいかもしれない。
* module 構造について
	Papillon -+-> some
                  |
	papillon -+
	とすることで、Papillon が papillonStr 等を export せずにすむ。
	ただし、papillonStr を export するのが役立つ可能性もあるので考えること
* Text/Papillon/Parser.hs を git から外す
	これは papillon 自体がある程度安定してから、となるだろう。
* UndecidableInstances が必要な部分について
	これを取ることが可能かどうか考える
* showPos は必要ないかもしれない
	あとで削除しよう
* Parser.peg を token を使って書き直す

******************************
*  機能面における細かい修正  *
******************************

* {-# LANGUAGE ... #-} がないときにはそれを追加する
* source の見直し
	今の文法だと、source: SomeSource\n のようになっているが
	今後より複雑な文法を許容した場合において ';' で区切ったほうが良いかもしれない
* 非終端記号に大文字で始まるものも許すようにしようかな
* 左再帰の解決はどうしようかな
	pappy はこれにひどく時間がかかっていた
* ; を省略可能にしようかな
* papillonStr' 等を String 以外も取れるようにする
	StringLike とかかな

**************************
*  ドキュメント関係      *
**************************

* cabal に examples directory を追加する
* cabal の description をもうすこしましにする
* homepage に example をのせる

**************************
*  後々やること          *
**************************

* 出来上がったコードを hlint で refactoring
* unicode への対応
* (t, _, h):triple で warning が出ないようにする
	つまり、もしもそのパターンが反駁不可であるならば、
	_ -> ... を取らないようにする
	とりあえずは VarP と WildP のみを含むものを check しよう
	ひとつしか constructor を持たない物もそれらと同様に扱う必要がある
	これにはおそらく reify が必要になるので後々することにしよう
