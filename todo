**************************
* 次にやること           *
**************************

* リファクタリング

**************************
* parser の表記/機能関係 *
**************************

* escapeC について
	\n, \t 以外の特殊文字についても考慮する

**************************
*  エラーメッセージ関係  *
**************************

* ParseError を表示する関数を TH で作成できないか考える
	問題はすべての型が Show であるわけではないというところだ。
	すべての型が Show である場合にのみ使える関数を TH で作ってもいいが ...
	いずれにしてもいろいろと考察すること

**************************
*  リファクタリング関係  *
**************************

* 関数の名前について
	parser とかそういう名前は conflict するので、もっとちゃんとした名前にする
	...M という名前を使ったときにとくに問題がある
* parser の呼び出しかたの改善
* papillon command は何も取らなければ filter とする。
	また、papillon [Input] や papillon [Input] -o [Output] の形も使う。
	そのうちに papillon -h や papillon --help も。
	より使いやすく GetOpt を使ってみるのもいいかもしれない。
* module 構造について
	Papillon -+-> some
                  |
	papillon -+
	とすることで、Papillon が papillonStr 等を export せずにすむ。
	ただし、papillonStr を export するのが役立つ可能性もあるので考えること
* Text/Papillon/Parser.hs を git から外す
	これは papillon 自体がある程度安定してから、となるだろう。
* UndecidableInstances が必要な部分について
	これを取ることが可能かどうか考える
* Parser.peg を token を使って書き直す
* ParseError の型をどうするか
	できたら型を公開しなくてもすむような形にしたいが
	つまり、型の構築子と reader だけを公開するという形にしたい

* data ParseError の型構築子を公開しないようにする
	data ParseError = ParseError ... を TH で書き、
	それは Papillon.hs にはりつけるのと、コードの変換時に追加するのとで使う。
	そして Papillon.hs からは ParseError は ParseError(..) とはしない
	作るときは makeParseError を使い、
	それぞれの field を入取するときも専用の関数を使う
	とりあえずはフィールド名を使っておけば良いと思う

* 上記は今の作りだと実行できない
	つまり、ParseError は Main で定義されているのでアクセス制限ができない
	mkParseError を作り、それを使うというのは未だにいい考えだが、
	上記ができないということで魅力は半減する

******************************
*  機能面における細かい修正  *
******************************

* {-# LANGUAGE ... #-} がないときにはそれを追加する
* source の見直し
	今の文法だと、source: SomeSource\n のようになっているが
	今後より複雑な文法を許容した場合において ';' で区切ったほうが良いかもしれない
* 非終端記号に大文字で始まるものも許すようにしようかな
* 左再帰の解決はどうしようかな
	pappy はこれにひどく時間がかかっていた
* ; を省略可能にしようかな
* papillonStr' 等を String 以外も取れるようにする
	StringLike とかかな

**************************
*  ドキュメント関係      *
**************************

* cabal に examples directory を追加する
* cabal の description をもうすこしましにする
* homepage に example をのせる

**************************
*  後々やること          *
**************************

* 出来上がったコードを hlint で refactoring
* unicode への対応
* (t, _, h):triple で warning が出ないようにする
	つまり、もしもそのパターンが反駁不可であるならば、
	_ -> ... を取らないようにする
	とりあえずは VarP と WildP のみを含むものを check しよう
	ひとつしか constructor を持たない物もそれらと同様に扱う必要がある
	これにはおそらく reify が必要になるので後々することにしよう
