{-# LANGUAGE QuasiQuotes, TypeFamilies #-}

import Text.Papillon

main :: IO ()
main = do
	case runError $ checkTriple $ parse "ab cd a d ef hello, my friend" of
		Right (r, _) -> print r
		Left _ -> putStrLn $ "error"

[papillon|

checkTriple :: (String, String)
	= (t, "ad", h):triple		{ (t, h) }
;
triple :: (String, String, String)
	= t:twos o:ones h:heads		{ (t, o, h) }
;
twos :: String
	= hs:([o, _]:token { o })*	{ hs }
;
ones :: String
	= hs:([h]:token { h })*		{ hs }
;
heads :: String
	= hs:((h:_):token { h })*	{ hs }
;
token :: String
	= w:word _:(' ' { () })*	{ w }
;
word :: String
	= !' ' c s:word	{ c : s }
	/		{ [] }
;

|]
