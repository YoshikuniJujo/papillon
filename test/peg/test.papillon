{-# LANGUAGE FlexibleContexts, QuasiQuotes #-}

import Text.Papillon

import Data.Char

main :: IO ()
main = do
	case dv_onlyDigits $ parse initialPos "123" of
		Right (str, _) -> print str
		Left err -> putStrLn $ "error: " ++ show err
	putStrLn "here"

cons :: a -> [a] -> [a]
cons = (:)
emp :: [a]
emp = []

type MString = Maybe String
just :: a -> Maybe a
just = Just
nothing :: Maybe a
nothing = Nothing

[papillon|

onlyDigits :: String
	= (Just s):digits		{ s }
;
digits :: MString
	= s:something		{ just s }
	/ _:other		{ nothing }
;
something :: String
	= c:[isDigit c] s:something	{ cons c s }
	/ c:[isDigit c]		{ cons c emp }
;
other :: String
	= c:[isLower c] s:other	{ cons c s }
	/ c:[isLower c]		{ cons c emp }
;

|]
