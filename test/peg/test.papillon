{-# LANGUAGE FlexibleContexts, QuasiQuotes, TypeFamilies #-}

import Text.Papillon

import Data.Char

data SomeData = SomeData Int String deriving Show

main :: IO ()
main = do
	case onlyDigits $ parse "123 abc" of
		Right (str, _) -> print $ str 4
		Left pe -> putStrLn $ "error: " ++ showParseError pe
	case onlyDigits $ parse "123 \n\t" of
		Right (str, _) -> print $ str 4
		Left pe -> putStrLn $ "error: " ++ showParseError pe
	case onlyDigits $ parse "123abc" of
		Right (str, _) -> print $ str 4
		Left pe -> putStrLn $ "OK! it's fail: " ++ showParseError pe
	case mulDigits $ parse "559" of
		Right ((m, n), _) -> print (m 3, n ["hello", "friend"])
		Left pe -> putStrLn $ "error: " ++ showParseError pe
	case addDigits2 $ parse "33 25" of
		Right (r, _) -> print r
		Left pe -> putStrLn $ "error: " ++ showParseError pe
	case divDigits $ parse "63 25" of
		Right (r, _) -> print r
		Left pe -> putStrLn $ "error: " ++ showParseError pe
	case someData $ parse "63 25" of
		Right (r, _) -> print r
		Left pe -> putStrLn $ "error: " ++ showParseError pe
	case getSomeData $ parse "63 25" of
		Right (r, _) -> print r
		Left pe -> putStrLn $ "error: " ++ showParseError pe
	case testSelLeaf $ parse "63 25" of
		Right (r, _) -> print r
		Left pe -> putStrLn $ "error: " ++ showParseError pe
	case testSelLeaf $ parse "abcde 25" of
		Right (r, _) -> print r
		Left pe -> putStrLn $ "error: " ++ showParseError pe
	case digits' $ parse "12345abc 25" of
		Right (r, _) -> print r
		Left pe -> putStrLn $ "error: " ++ showParseError pe
	case testAnd $ parse "12345abc 25" of
		Right (r, _) -> print r
		Left pe -> putStrLn $ "error: " ++ showParseError pe
	case testAnd $ parse "12345bc 25" of
		Right (r, _) -> print r
		Left pe -> putStrLn $ "OK! it's fail: " ++ showParseError pe
	case testNot $ parse "12345abc 25" of
		Right (r, _) -> print r
		Left pe -> putStrLn $ "OK! it's fail: " ++ showParseError pe
	case testNot $ parse "12345bc 25" of
		Right (r, _) -> print r
		Left pe -> putStrLn $ "error: " ++ showParseError pe

showParseError :: ParseError (Pos String) -> String
showParseError (ParseError c m com d ns (ListPos (CharPos p))) =
	unwords (map (showReading d) ns) ++ (if null ns then "" else " ") ++
	m ++ c ++
	(if null com then "" else " {- " ++ com ++ " -}") ++
	" at position: " ++ show p

showReading :: Derivs -> String -> String
showReading d "derivsChars" = case derivsChars d of
	Right (c, _) -> show c
	Left _ -> error "bad"
showReading d "other" = case other d of
	Right (c, _) -> show c
	Left _ -> error "bad"
showReading _ n = "yet: " ++ n

[papillon|

testSelLeaf :: Int
	= i:(d:something { read d } / o:other { length o }) { i }
;
onlyDigits :: Int -> ([String], Int, Maybe String, Maybe Char)
	= (Just s, - 8):digits [] {-# "empty other" #-} :other ' ' mo:(o:other { o })?
		mc:(c:[not $ isLower c] { c })?
		{ \x -> (replicate x $ 'c' : s ++ show (-5 :: Int), - 9, mo, mc) }
;
mulDigits :: (Int -> Int, [String] -> [String])
	= ds:something			{ ((* (read ds)), (ds :)) }
;
addDigits :: Int
	= x:something ' ' y:something	{ (+) (read x) (read y) }
;
addDigits2 :: Int
	= ((:) _ x):something ' ' y:something	{ (read x + read y) }
;
divDigits :: Int
	= x:something ' ' y:something	{ read x `div` read y }
;
getSomeData :: (Int, String)
	= (x `SomeData` y):someData	{ (x, y) }
;
someData :: SomeData
	= x:something ' ' y:something	{ read x `SomeData` y}
;
digits :: (Maybe String, Int)
	= s:something			{ (Just s, - 8) }
	/ _:other			{ (Nothing, -11) }
;
something :: String
	= c:[isDigit c] s:something	{ c : s }
	/ c:[isDigit c]			{ c : [] }
;
other :: String
	= c:[isLower c] s:other		{ c : s }
	/				{ [] }
;
digits' :: Int
	= d:(c:[isDigit c] { c })+	{ read d }
;
testAnd :: Int
	= d:digits' &'a' {-# "\"followed by 'a'" #-}	{ d }
;
testNot :: Int
	= d:digits' !'a' {-# "\n\tnot followd by 'a'" #-}	{ d }
;

|]
