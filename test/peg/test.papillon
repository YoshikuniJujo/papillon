{-# LANGUAGE FlexibleContexts, QuasiQuotes, TypeFamilies, UndecidableInstances #-}

import Text.Papillon

import Data.Char

main :: IO ()
main = do
	case dv_onlyDigits $ parse initialPos "123 abc" of
		Right (str, _) -> print $ str 4
		Left err -> putStrLn $ "error: " ++ show err
	case dv_onlyDigits $ parse initialPos "123 \n\t" of
		Right (str, _) -> print $ str 4
		Left err -> putStrLn $ "error: " ++ show err
	case dv_onlyDigits $ parse initialPos "123abc" of
		Right (str, _) -> print $ str 4
		Left err -> putStrLn $ "OK! fail: " ++ show err
	case dv_mulDigits $ parse initialPos "559" of
		Right ((m, n), _) -> print (m 3, n ["hello", "friend"])
		Left err -> putStrLn $ "error: " ++ show err
	case dv_addDigits2 $ parse initialPos "33 25" of
		Right (r, _) -> print r
		Left err -> putStrLn $ "error: " ++ show err

[papillon|

onlyDigits :: Int -> ([String], Int, Maybe String, Maybe Char)
	= (Just s, - 8):digits []:other ' ' mo:(o:other { o })?
		mc:(c:[not $ isLower c] { c })?
		{ \x -> (replicate x $ 'c' : s ++ show (-5 :: Int), - 9, mo, mc) }
;
mulDigits :: (Int -> Int, [String] -> [String])
	= ds:something			{ ((* (read ds)), (ds :)) }
;
addDigits :: Int
	= x:something ' ' y:something	{ (+) (read x) (read y) }
;
addDigits2 :: Int
	= ((:) _ x):something ' ' y:something	{ (read x + read y) }
;
digits :: (Maybe String, Int)
	= s:something			{ (Just s, - 8) }
	/ _:other			{ (Nothing, -11) }
;
something :: String
	= c:[isDigit c] s:something	{ c : s }
	/ c:[isDigit c]			{ c : [] }
;
other :: String
	= c:[isLower c] s:other		{ c : s }
	/				{ [] }
;

|]
