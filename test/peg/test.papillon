{-# LANGUAGE FlexibleContexts, QuasiQuotes, TypeFamilies, UndecidableInstances #-}

import Text.Papillon

import Data.Char

main :: IO ()
main = do
	case dv_onlyDigits $ parse initialPos "123 abc" of
		Right (str, _) -> print $ str 4
		Left err -> putStrLn $ "error: " ++ show err
	case dv_onlyDigits $ parse initialPos "123abc" of
		Right (str, _) -> print $ str 4
		Left err -> putStrLn $ "OK! fail: " ++ show err

[papillon|

onlyDigits :: (->) Int [String]
	= (Just s):digits []:other	{ \x -> replicate x $ 'c' : s ++ "hoge" }
;
digits :: Maybe String
	= s:something			{ Just s }
	/ _:other			{ Nothing }
;
something :: String
	= c:[isDigit c] s:something	{ c : s }
	/ c:[isDigit c]			{ c : [] }
;
other :: String
	= c:[isLower c] s:other		{ c : s }
	/				{ [] }
;

|]
