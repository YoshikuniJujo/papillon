{-# LANGUAGE QuasiQuotes, FlexibleContexts, TypeFamilies #-}

import Text.Papillon

import Data.Char

type Nil = ()
nil :: Nil
nil = ()
cons :: a -> [a] -> [a]
cons = (:)
emp :: [a]
emp = []

true :: Bool
true = True

main :: IO ()
main = case three $ parse initialPos "333" of
	Right ((), _) -> putStrLn "OK!"
	Left (ParseError c m p _ _ _) -> putStrLn $ "not matched: " ++ show (c, m, p)

[papillon|

oneTwoThree :: Nil
	= "123":string	{ nil }
;
string :: String
	= c s:string	{ cons c s }
	/		{ emp }
;
three :: Nil
	= '3' '3' '3'	{ nil }
;
other :: Nil
	= '3':something	{ nil }
;
something :: Char
	= c:[isDigit c]	{ c }
;

|]
