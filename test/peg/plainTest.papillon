{-# LANGUAGE QuasiQuotes, TypeFamilies #-}

import Text.Papillon
import Data.Char

main :: IO ()
main = do
	case runError $ str $ parse "Hello, world" of
		Right (r, _) -> print r
		Left _ -> putStrLn "parse error"
	case runError $ str $ parse "hellOW, world" of
		Right (r, _) -> print r
		Left _ -> putStrLn "parse error"

type Hoge = Either (String, String) (Either (String, String) ())

[papillon|

uppers :: String
	= s:(c:[isUpper c] { c })+	{ s }
;
lowers :: String = cs:<(`elem` ['a' .. 'z'])>+	{ cs };
-- lowers :: String = cs:<isLower>+	{ cs };
-- str = uppers lowers / lowers uppers / lowers;
-- str :: String = l:lowers	{ l };
-- lowers :: String = cs:<(`elem` ['a' .. 'z'])>+	{ cs };
str :: (String, String)
	= u:uppers l:lowers	{ (u, l) }
	/ l:lowers u:uppers	{ (l, u) }
	/ l:lowers		{ (l, "") }

|]
