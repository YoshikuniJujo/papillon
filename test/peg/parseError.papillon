{-# LANGUAGE QuasiQuotes #-}

import Text.Papillon

main :: IO ()
main = do
	case dv_something $ parse initialPos "parse fail" of
		Right (r, _) -> putStrLn $ "no no it's success: " ++ show r
		Left err -> putStrLn $ "OK! it's fail: " ++ show err
	case dv_more $ parse initialPos "" of
		Right (r, _) -> putStrLn $ "no no it's success: " ++ show r
		Left err -> putStrLn $ "OK! it's fail: " ++ show err

type Nil = ()
nil :: Nil
nil = ()
cons :: a -> [a] -> [a]
cons = (:)
emp :: [a]
emp = []

[papillon|

more :: Char = c		{ c }
;
something :: Nil = !_:other		{ nil }
;
other :: Nil = "parse fail":string	{ nil }
;
string :: String
	= c s:string		{ cons c s }
	/			{ emp }
;

|]
