{-# LANGUAGE QuasiQuotes, TypeFamilies #-}

import Text.Papillon
import Data.Char

main :: IO ()
main = do
	case something $ parse "parse fail" of
		Right (r, _) -> putStrLn $ "no no it's success: " ++ show r
		Left pe -> putStrLn $ "OK! parse failed: " ++ showParseError pe
	case more $ parse "" of
		Right (r, _) -> putStrLn $ "no no it's success: " ++ show r
		Left pe -> putStrLn $ "OK! parse failed: " ++ showParseError pe
	case other $ parse "parse hoge" of
		Right (r, _) -> putStrLn $ "no no it's success: " ++ show r
		Left pe -> putStrLn $ "OK! parse failed: " ++ showParseError pe
	case digits $ parse "parse hoge" of
		Right (r, _) -> putStrLn $ "no no it's success: " ++ show r
		Left pe -> putStrLn $ "OK! parse failed: " ++ showParseError pe

showParseError :: ParseError (Pos String) Derivs -> String
showParseError pe =
	unwords (map (showReading d) ns) ++ (if null ns then "" else " ") ++
	m ++ c ++
	(if null com then "" else " {- " ++ com ++ " -} ") ++
	" at position: " ++ show p
	where
	[c, m, com] = ($ pe) `map` [peCode, peMessage, peComment]
	ns = peReading pe
	d = peDerivs pe
	p = pePositionS pe

showReading :: Derivs -> String -> String
showReading d "string" = case string d of
	Right (s, _) -> show s
	Left _ -> error "bad"
showReading d "other" = case other d of
	Right (s, _) -> show s
	Left _ -> error "bad"
showReading d "char" = case char d of
	Right (s, _) -> show s
	Left _ -> error "bad"
showReading _ n = "showReading: yet: " ++ n

type Nil = ()
nil :: Nil
nil = ()
cons :: a -> [a] -> [a]
cons = (:)
emp :: [a]
emp = []

[papillon|

more :: Char = c						{ c }
;
something :: Nil = !_:other {-# "not followed by other" #-}	{ nil }
;
other :: Nil = "parse fail" {-# "it's parse fail" #-} :string	{ nil }
;
string :: String
	= c s:string						{ cons c s }
	/							{ emp }
;
digits :: String = ds:<isDigit>+				{ ds }
;

|]
