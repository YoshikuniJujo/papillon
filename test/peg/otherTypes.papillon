{-# LANGUAGE QuasiQuotes, TypeFamilies #-}

import Text.Papillon

instance SourceList MyToken where
	listToken [] = Nothing
	listToken (c : s) = Just (c, s)

data MyToken = A | B | C deriving Show

data YourToken = D | E | F deriving Show
data YourSource = Empty | TwoD | OneD | DEF | EF | OneF deriving Show

instance Source YourSource where
	type Token YourSource = YourToken
	getToken Empty = Nothing
	getToken TwoD = Just (D, OneD)
	getToken OneD = Just (D, Empty)
	getToken DEF = Just (D, EF)
	getToken EF = Just (E, OneF)
	getToken OneF = Just (F, Empty)

main :: IO ()
main = case dv_str $ parse DEF of
	Right (r, _) -> print r
	Left err -> putStrLn $ "not match: " ++ err

type MyTokens = [MyToken]
type YourTokens = [YourToken]

cons :: a -> [a] -> [a]
cons = (:)
emp :: [a]
emp = []

[papillon|

source: YourSource

str :: YourTokens
	= c s:str	{ cons c s }
	/		{ emp }
;
something :: YourToken = c	{ c };

|]
