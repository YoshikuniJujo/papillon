{-# LANGUAGE QuasiQuotes, TypeFamilies #-}

import Text.Papillon
import Data.Char

main :: IO ()
main = case testLL $ parse "3, 8, 5" of
	Right (r, _) -> print r
	Left (ParseError c m p _ _ _) -> putStrLn $ "error: " ++ show (c, m, p)

[papillon|

testLL :: [Int]
	= l:digit ',' ' ' m:digit ',' ' ' n:digit	{ [l, m, n] }
;
digit :: Int
	= d:[isDigit d]		{ read [d] }
;

|]
