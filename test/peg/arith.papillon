{-# LANGUAGE QuasiQuotes, TypeFamilies #-}

module Main where

import Text.Papillon
import Data.Char

main :: IO ()
main = do
	case expression $ parse "3 * (2 + 24) / 8 / 3" of
		Right (d, _) -> print d
		Left pe -> putStrLn $ "error: " ++ showParseError pe
	case expression $ parse "3 + 2 + 24 / 8 / 3" of
		Right (d, _) -> print d
		Left pe -> putStrLn $ "error: " ++ showParseError pe
	case expression $ parse "50 + 3 * 6" of
		Right (d, _) -> print d
		Left pe -> putStrLn $ "error: " ++ showParseError pe
	case expression $ parse "3 * (50 + 5) / 8" of
		Right (d, _) -> print d
		Left pe -> putStrLn $ "error: " ++ showParseError pe
	case expression $ parse "8 * 2 + + 5" of
		Right (d, _) -> print d
		Left pe -> putStrLn $ "OK! it's fail: " ++ showParseError pe
	case expression $ parse "***" of
		Right (d, _) -> print d
		Left pe -> putStrLn $ "OK! it's fail: " ++ showParseError pe
	case expression $ parse "123<456" of
		Right (d, _) -> print d
		Left pe -> putStrLn $ "OK! it's fail: " ++ showParseError pe

showParseError :: ParseError (Pos String) -> String
showParseError pe =
	unwords (map (showReading d) ns) ++ (if null ns then "" else " ") ++
	m ++ c ++ (if null com then "" else " {- " ++ com ++ " -}") ++
	" at position: " ++ show p
	where
	c = peCode pe
	m = peMessage pe
	com = peComment pe
	ns = peReading pe
	d = peDerivs pe
	p = pePositionS pe

showReading :: Derivs -> String -> String
showReading d "derivsChars" = case derivsChars d of
	Right (c, _) -> show c
	Left _ -> error "bad"
showReading _ n = "yet: " ++ n

type LeftInteger = Integer -> Integer
type Nil = ()

readC :: Char -> Int
readC = read . (: "")

mkLeftInteger :: Int -> (Integer -> Integer) -> Integer -> Integer
mkLeftInteger x y = \i -> y (toLeftInteger x i)
toLeftInteger :: Int -> Integer -> Integer
toLeftInteger x = \i -> i * 10 + toInteger x
nil ::Nil
nil = ()
zero :: Integer
zero = 0
isSymA, isSymM, isOpenParen, isCloseParen :: Char -> Bool
isSymA = (`elem` "+-")
isSymM = (`elem` "*/%")
[isOpenParen, isCloseParen] = map (==) "()"

type LeftMul = (Integer -> Integer -> Integer, Integer) -> Integer

mkLeftMul :: Char -> Integer -> LeftMul -> LeftMul
mkLeftMul '*' x y = \oi -> y ((*), toLeftMul x oi)
mkLeftMul '/' x y = \oi -> y (div, toLeftMul x oi)
mkLeftMul '%' x y = \oi -> y (mod, toLeftMul x oi)
mkLeftMul '+' x y = \oi -> y ((+), toLeftMul x oi)
mkLeftMul _ _ _ = error "mkLeftMul"
toLeftMul :: Integer -> LeftMul
toLeftMul x = \(o, i) -> i `o` x

comMul :: Char -> LeftMul -> LeftMul -> LeftMul
comMul s x y = mkLeftMul s (x ((*), 1)) y
toMul :: LeftMul -> LeftMul
toMul v = \(o, i) -> i `o` (v ((*), 1))

getMul :: LeftMul -> Integer
getMul v = v ((*), 1)

[papillon|

{-
{-
	{- this {- nested -} is comment -}
-}{--}
-- {-comment-}
-}
expression :: Integer
	= _:spacing v:additive !_:[True] {-# "end of file" #-} { getMul v }
;
additive :: LeftMul
	= l:multitive s:symbolA r:additive	{ comMul s l r }
	/ v:multitive				{ toMul v }
;
multitive :: LeftMul
-- comment2
	= l:primary s:symbolM r:multitive	{ mkLeftMul s l r }
	/ v:primary				{ toLeftMul v }
;
primary :: Integer
	= d:decimal				{ d }
	/ c:[isOpenParen c {-# "check '('" #-}] _:spacing v:additive cc:[isCloseParen cc] _:spacing
						{ getMul v }
;
decimal :: Integer
	= d:digits _:spacing		{ d zero }
;
digits :: LeftInteger
	= d:digit ds:digits		{ mkLeftInteger d ds }
	/ d:digit			{ toLeftInteger d }
;
digit :: Int
	= d:[isDigit d]			{ read $ d : [] }
;
symbolA :: Char
	= s:symCharsA _:spacing		{ s }
;
symbolM :: Char
	= s:symCharsM _:spacing		{ s }
;
symCharsA :: Char
	= s:[isSymA s]			{ s }
;
symCharsM :: Char
	= s:[isSymM s]			{ s }
;
spacing :: ()
	= s:[isSpace s] _:spacing	{ () }
	/				{ () }
;
|]
